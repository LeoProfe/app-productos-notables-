import streamlit as st
import sympy as sp
import random

def generar_expansion(nivel, x):
    if nivel == "B√°sico":
        ejercicios = [
            (x + 3)**2,
            (x - 5)**2,
            (x + 4)*(x - 4),
        ]
    elif nivel == "Intermedio":
        a = random.randint(2, 5)
        b = random.randint(1, 6)
        ejercicios = [
            (a*x + b)**2,
            (a*x - b)**2,
            (a*x + b)*(a*x - b),
            (x - 2)**3,
        ]
    else:  # Avanzado
        a = random.randint(2, 5)
        b = random.randint(1, 5)
        ejercicios = [
            (a*x + b)**3,
            (a*x - b)**3,
            ((x + b)*(x - b)) + (a*x + b)**2,
        ]
    return random.choice(ejercicios)


def generar_factorizacion(nivel, x):
    if nivel == "B√°sico":
        ejercicios = [
            x**2 + 6*x + 9,
            x**2 - 16,
            x**2 - 10*x + 25,
        ]
    elif nivel == "Intermedio":
        ejercicios = [
            9*x**2 - 30*x + 25,
            4*x**2 - 25,
            x**3 - 6*x**2 + 12*x - 8,
        ]
    else:  # Avanzado
        ejercicios = [
            8*x**3 + 12*x**2 + 6*x + 1,
            16*x**2 - 49,
            (x**2 - 4) + (4*x**2 + 4*x + 1),
        ]
    return random.choice(ejercicios)


def generador_ejercicios():
    st.set_page_config(
        page_title="Pr√°ctica de Productos Notables y Factorizaci√≥n",
        page_icon="üßÆ",
        layout="centered",
    )

    st.title("üßÆ Pr√°ctica de Productos Notables y Factorizaci√≥n")
    st.markdown("---")

    # --- TEOR√çA RESUMIDA (Parte superior) ---
with st.expander("üìö Resumen Te√≥rico (click para ver/ocultar)", expanded=True):
    st.markdown("""
    ### Productos Notables

    - **Cuadrado de binomio:**  
      \\[
      (a \\pm b)^2 = a^2 \\pm 2ab + b^2
      \\]

    - **Diferencia de cuadrados:**  
      \\[
      (a + b)(a - b) = a^2 - b^2
      \\]

    - **Cubo de binomio:**  
      \\[
      (a \\pm b)^3 = a^3 \\pm 3a^2b + 3ab^2 \\pm b^3
      \\]

    ### Factorizaci√≥n

    - **Factor com√∫n:** Extraer el factor com√∫n de todos los t√©rminos.  
      Ejemplo: \\( ax + ay = a(x + y) \\)

    - **Trinomio cuadrado perfecto:**  
      \\[
      a^2 \\pm 2ab + b^2 = (a \\pm b)^2
      \\]

    - **Diferencia de cuadrados:**  
      \\[
      a^2 - b^2 = (a + b)(a - b)
      \\]

    - **Suma y diferencia de cubos:**  
      \\[
      a^3 + b^3 = (a + b)(a^2 - ab + b^2)
      \\]  
      \\[
      a^3 - b^3 = (a - b)(a^2 + ab + b^2)
      \\]
    """, unsafe_allow_html=True)


    st.markdown("---")

    # Inicializaci√≥n segura de sesi√≥n
    if "ejercicio_generado" not in st.session_state:
        st.session_state.ejercicio_generado = False
    if "modo" not in st.session_state:
        st.session_state.modo = "Expandir productos notables"
    if "nivel" not in st.session_state:
        st.session_state.nivel = "B√°sico"
    if "respuesta_usuario" not in st.session_state:
        st.session_state.respuesta_usuario = ""

    x = sp.symbols('x')

    # --- FORMULARIO INTEGRADO ---
    with st.form(key="form_practica", clear_on_submit=False):
        modo = st.radio(
            "¬øQu√© deseas practicar?", 
            ["Expandir productos notables", "Aplicar factorizaci√≥n"], 
            horizontal=True,
            index=["Expandir productos notables", "Aplicar factorizaci√≥n"].index(st.session_state.modo)
        )

        nivel = st.selectbox(
            "Nivel de dificultad:", 
            ["B√°sico", "Intermedio", "Avanzado"],
            index=["B√°sico", "Intermedio", "Avanzado"].index(st.session_state.nivel)
        )

        # Si se genera ejercicio nuevo, actualizamos el estado
        generar = st.form_submit_button("üîÅ Generar nuevo ejercicio")

        if generar or not st.session_state.ejercicio_generado:
            if modo == "Expandir productos notables":
                expr = generar_expansion(nivel, x)
                solucion = sp.expand(expr)
            else:
                expr = generar_factorizacion(nivel, x)
                solucion = sp.factor(expr)

            st.session_state.update({
                "modo": modo,
                "nivel": nivel,
                "expr": expr,
                "solucion": solucion,
                "ejercicio_generado": True,
                "respuesta_usuario": "",
                "mensaje_retro": None,
                "resultado_verif": None,
            })

        if st.session_state.ejercicio_generado:
            st.markdown(f"### üí° Ejercicio: {st.session_state.modo} - Nivel {st.session_state.nivel}")
            st.latex(sp.latex(st.session_state.expr))

            respuesta_usuario = st.text_input(
                "‚úçÔ∏è Ingresa tu respuesta (usa ^ o ** para potencias):",
                value=st.session_state.get("respuesta_usuario", ""),
                key="respuesta_input"
            )

            verificar = st.form_submit_button("‚úÖ Verificar respuesta")

            if verificar:
                st.session_state.respuesta_usuario = respuesta_usuario.strip()
                try:
                    entrada_usuario = sp.sympify(st.session_state.respuesta_usuario.replace("^", "**"))
                    if st.session_state.modo == "Expandir productos notables":
                        correcto = sp.simplify(entrada_usuario - st.session_state.solucion) == 0
                    else:
                        # Para factorizaci√≥n, comparamos expandiendo ambas expresiones
                        correcto = sp.simplify(sp.expand(entrada_usuario) - sp.expand(st.session_state.expr)) == 0

                    if correcto:
                        st.session_state.resultado_verif = "correcto"
                        st.success("üéâ ¬°Correcto! Excelente trabajo.")
                        st.balloons()
                    else:
                        st.session_state.resultado_verif = "incorrecto"
                        st.error("‚ùå Tu respuesta no es correcta.")
                        st.markdown("### ‚úÖ Soluci√≥n esperada:")
                        st.latex(sp.latex(st.session_state.solucion))

                        # Retroalimentaci√≥n pedag√≥gica
                        if st.session_state.modo == "Expandir productos notables":
                            st.info("üìò Consejo: Revisa si aplicaste correctamente la f√≥rmula del cuadrado o cubo del binomio.")
                        else:
                            st.info("üîç Intenta buscar patrones comunes: trinomios cuadrados, diferencia de cuadrados, cubos perfectos, etc.")

                            st.markdown("### üß† Consejo pedag√≥gico:")
                            expr = st.session_state.expr
                            if isinstance(expr, sp.Add):
                                terms = list(expr.args)
                                if len(terms) == 3:
                                    st.markdown("- ¬øPodr√≠a ser un trinomio cuadrado perfecto?")
                                elif any(t.has(x**2) for t in terms) and any(t.has(x**0) for t in terms):
                                    st.markdown("- ¬øExiste una diferencia de cuadrados?")
                                elif any(t.has(x**3) for t in terms):
                                    st.markdown("- ¬øHay estructura de cubo perfecto?")
                except Exception as e:
                    st.error(f"‚ö†Ô∏è No entend√≠ tu expresi√≥n. Verifica par√©ntesis y operadores. Detalle: {e}")

if __name__ == "__main__":
    generador_ejercicios()
